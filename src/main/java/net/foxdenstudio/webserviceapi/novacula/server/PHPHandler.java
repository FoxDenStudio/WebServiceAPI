package net.foxdenstudio.webserviceapi.novacula.server;

import java.io.*;

/**
 * Created by Joshua Freedman on 11/29/2015.
 * Project: SpongeForge->FDS-WSAPI
 */
public class PHPHandler {

    /* Method isCGIProg test if the file is a cgi program **/
    public static boolean isCGIProg(String fileName) {

        int fileExtensionPosition = (int) fileName.lastIndexOf(".");

        if (fileName.substring(fileExtensionPosition + 1, fileName.length()).equals("exe")) {
            return true;
        } else {
            return false;
        }
    }

    /* Method isPHPProg test if the file is a PHP Script **/
    public static boolean isPHPProg(String fileName) {

        int fileExtensionPosition = (int) fileName.lastIndexOf(".");

        if (fileName.substring(fileExtensionPosition + 1, fileName.length()).equals("php"))

            return true;
        else
            return false;

    }

    public static void processCGI(String phpFile, OutputStream outputStreamToClient, int typeCGI) throws IOException {

        Runtime runtime = Runtime.getRuntime(); //creating an object Runtime by calling the getRuntime Method
        String cgiContent = "";
        Process process = null;//win32 process initialised to null

        switch (typeCGI) {

            case 1:
                process = runtime.exec(phpFile);
                break;
            case 2:
                process = runtime.exec("rootdir" + File.separator + "php" + File.separator + "php " + "pages" + File.separator + phpFile);//TODO from config
                break;
        }

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));

        while ((cgiContent = bufferedReader.readLine()) != null) {

            /** we eliminate useless data generated by the program */

            if (cgiContent.startsWith("Status") || cgiContent.startsWith("Content") || cgiContent.startsWith("X-Powered-By")) {

                outputStreamToClient.write("".getBytes());
                outputStreamToClient.flush();

            } else {
                //we send the data redirected from the program STDOUT to the client
                outputStreamToClient.write((cgiContent + "\r\n").getBytes());
                outputStreamToClient.flush();
            }
        }

        process.destroy();//we destroy the process to free memory

    }
}
